# Generated by Selenium IDE
import pytest
import time
import json
import csv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys

f = open('bike_location.csv', 'r', encoding='utf-8')
rdr = csv.reader(f)
a_list=[]
for line in rdr:
    a_list.append(line)
f.close() 

class TestWedonttalkanymore():
  def setup_method(self):
    self.driver = webdriver.Chrome('/mnt/c/work/chromedriver.exe')
    self.vars = {}
  
  def teardown_method(self):
    self.driver.quit();
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_wedonttalkanymore(self):
    self.driver.get("https://power.larc.nasa.gov/data-access-viewer/")
    #self.driver.find_element(By.LINK_TEXT,"확인").click()
    # self.driver.find_element(By.LINK_TEXT,"확인").click()
    self.driver.set_window_size(1905, 1016)
    # 3 | click | css=.enable-btn |  | 
    time.sleep(30)
    self.driver.find_element(By.CSS_SELECTOR, ".enable-btn").click()
    self.driver.find_element(By.ID, "datepickerstart").clear()
    self.driver.find_element(By.ID, "datepickerstart").click()
    self.driver.find_element(By.ID, "datepickerstart").send_keys("06/01/2009")
    self.driver.find_element(By.ID, "userinput").click()
    self.driver.find_element(By.ID, "datepickerend").clear()
    self.driver.find_element(By.ID, "datepickerend").click()
    self.driver.find_element(By.ID, "datepickerend").send_keys("06/01/2019")
    #self.driver.find_element(By.ID, "userinput").click()
    self.driver.find_element(By.ID, "csvbutton").click()
    self.driver.find_element(By.ID, "asciibutton").click()
    element = self.driver.find_element(By.ID, "dijit__WidgetBase_4")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    element = self.driver.find_element(By.ID, "dijit__WidgetBase_4")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.ID, "dijit__WidgetBase_4")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    self.driver.find_element(By.ID, "Meteorology (Temperature)_anchor").click()
    self.driver.find_element(By.ID, "Sizing and Pointing of Solar Panels and for Solar Thermal Applications_anchor").click()
    element = self.driver.find_element(By.ID, "dijit__WidgetBase_4")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    element = self.driver.find_element(By.ID, "dijit__WidgetBase_4")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.ID, "dijit__WidgetBase_4")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()

    count = 0
    for a in a_list[1:]:
      count+=1
      self.driver.find_element(By.ID, "latdaily").click()
      self.driver.find_element(By.ID, "latdaily").send_keys(a[1])
      self.driver.find_element(By.ID, "londaily").click()
      self.driver.find_element(By.ID, "londaily").send_keys(a[0])
      self.driver.find_element(By.ID, "testbuttondaily").click()
      self.vars["window_handles"] = self.driver.window_handles
      time.sleep(30)
      self.driver.find_element(By.ID, "exportCSV").click()
      #self.vars["win7408"] = self.wait_for_window(10)
      #self.driver.switch_to.window(self.vars["win7408"])
      #self.driver.close()
      #self.driver.switch_to.window(self.vars["win3599"])
      element = self.driver.find_element(By.ID, "exportCSV")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.CSS_SELECTOR, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      self.driver.find_element(By.ID, "ordermore").click()
      element = self.driver.find_element(By.ID, "cleargraphicdaily")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).click_and_hold().perform()
      element = self.driver.find_element(By.ID, "cleargraphicdaily")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.ID, "cleargraphicdaily")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).release().perform()
      self.driver.find_element(By.ID, "cleargraphicdaily").click()
      element = self.driver.find_element(By.ID, "dijit__WidgetBase_4")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).click_and_hold().perform()
      element = self.driver.find_element(By.ID, "dijit__WidgetBase_4")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.ID, "dijit__WidgetBase_4")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).release().perform()
      if count>5:
        return
ts = TestWedonttalkanymore()
ts.setup_method()
ts.test_wedonttalkanymore() 